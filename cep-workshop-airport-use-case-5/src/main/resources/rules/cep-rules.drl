package org.jboss.ddoyle.brms.cep.workshop.rules;

import org.jboss.ddoyle.brms.cep.workshop.model.BagScannedEvent;
import org.jboss.ddoyle.brms.cep.workshop.model.Location;

declare BagScannedEvent
   @role(event)
   @timestamp(timestamp)
   @expires(5d)
end

rule "BagLostBeforeSorting"
when
	$event1:BagScannedEvent(location == Location.CHECK_IN)
	not($event2:BagScannedEvent(location == Location.SORTING, this != $event1, this.bagTag.id == $event1.bagTag.id, this after[0, 10m] $event1)) 
then
	System.out.println("Bag lost before sorting: " + $event1.getBagTag().getId());
end

rule "NumberOfBagsEnteredSortingInLastHour"
when
	$number: Number() from accumulate ($b:BagScannedEvent(location == Location.SORTING) over window:time(60m), count($b))
then
	System.out.println("\nNumber of bags that entered sorting in the last hour: " + $number + ". CurrentTime: " + drools.getWorkingMemory().getSessionClock().getCurrentTime());
end


rule "Average weight of last 5 bags that entered Sorting stage."
when
	$number: Number() from accumulate ($b:BagScannedEvent(location == Location.SORTING) over window:length(5), average($b.getWeight()))
then
	System.out.println("\nAverage weight of last 5 bags: " + $number + ". CurrentTime: " + drools.getWorkingMemory().getSessionClock().getCurrentTime());
end

/*
 * One note with this rule .... if there is event for a bag in sorting, there has to be an event for it in check_in.
 * If not, that average will not be taken into account.
 * So, we can create a warning rule for that state as well.
 */
rule "Average processing time of last 5 bags in Sorting"
enabled false
when
	$number: Number() from accumulate ($eventSorting: BagScannedEvent(location == Location.SORTING) over window:length(5) and
											$eventCheckIn: BagScannedEvent(location == Location.CHECK_IN, bagTag.id == $eventSorting.bagTag.id), 
											average ($eventSorting.getTimestamp().getTime() - $eventCheckIn.getTimestamp().getTime())) 
then
	System.out.println("Average processing time of the last 5 bags: " + $number);
end

rule "SORTING event should have matching CHECK_IN event"
when
	//Lab 5: See the commment above the previous rule. Implement a rule that detects this situation and prints an error on the console.
then
	//	System.out.println("BIG ERROR, we don't have a matching event in CHECK_IN for the event in SORTING");
end



